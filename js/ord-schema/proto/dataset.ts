/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.22.3
 * source: ord-schema/proto/dataset.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./reaction";
import * as pb_1 from "google-protobuf";
export namespace ord {
    export class Dataset extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            description?: string;
            reactions?: dependency_1.ord.Reaction[];
            reaction_ids?: string[];
            dataset_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("reactions" in data && data.reactions != undefined) {
                    this.reactions = data.reactions;
                }
                if ("reaction_ids" in data && data.reaction_ids != undefined) {
                    this.reaction_ids = data.reaction_ids;
                }
                if ("dataset_id" in data && data.dataset_id != undefined) {
                    this.dataset_id = data.dataset_id;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get reactions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.ord.Reaction, 3) as dependency_1.ord.Reaction[];
        }
        set reactions(value: dependency_1.ord.Reaction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get reaction_ids() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set reaction_ids(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get dataset_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set dataset_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            name?: string;
            description?: string;
            reactions?: ReturnType<typeof dependency_1.ord.Reaction.prototype.toObject>[];
            reaction_ids?: string[];
            dataset_id?: string;
        }): Dataset {
            const message = new Dataset({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.reactions != null) {
                message.reactions = data.reactions.map(item => dependency_1.ord.Reaction.fromObject(item));
            }
            if (data.reaction_ids != null) {
                message.reaction_ids = data.reaction_ids;
            }
            if (data.dataset_id != null) {
                message.dataset_id = data.dataset_id;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                description?: string;
                reactions?: ReturnType<typeof dependency_1.ord.Reaction.prototype.toObject>[];
                reaction_ids?: string[];
                dataset_id?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.reactions != null) {
                data.reactions = this.reactions.map((item: dependency_1.ord.Reaction) => item.toObject());
            }
            if (this.reaction_ids != null) {
                data.reaction_ids = this.reaction_ids;
            }
            if (this.dataset_id != null) {
                data.dataset_id = this.dataset_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.description.length)
                writer.writeString(2, this.description);
            if (this.reactions.length)
                writer.writeRepeatedMessage(3, this.reactions, (item: dependency_1.ord.Reaction) => item.serialize(writer));
            if (this.reaction_ids.length)
                writer.writeRepeatedString(4, this.reaction_ids);
            if (this.dataset_id.length)
                writer.writeString(5, this.dataset_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Dataset {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Dataset();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.reactions, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_1.ord.Reaction.deserialize(reader), dependency_1.ord.Reaction));
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    case 5:
                        message.dataset_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Dataset {
            return Dataset.deserialize(bytes);
        }
    }
    export class DatasetExample extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            dataset_id?: string;
            description?: string;
            url?: string;
            created?: dependency_1.ord.RecordEvent;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("dataset_id" in data && data.dataset_id != undefined) {
                    this.dataset_id = data.dataset_id;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
            }
        }
        get dataset_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set dataset_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get created() {
            return pb_1.Message.getWrapperField(this, dependency_1.ord.RecordEvent, 4) as dependency_1.ord.RecordEvent;
        }
        set created(value: dependency_1.ord.RecordEvent) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_created() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            dataset_id?: string;
            description?: string;
            url?: string;
            created?: ReturnType<typeof dependency_1.ord.RecordEvent.prototype.toObject>;
        }): DatasetExample {
            const message = new DatasetExample({});
            if (data.dataset_id != null) {
                message.dataset_id = data.dataset_id;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.created != null) {
                message.created = dependency_1.ord.RecordEvent.fromObject(data.created);
            }
            return message;
        }
        toObject() {
            const data: {
                dataset_id?: string;
                description?: string;
                url?: string;
                created?: ReturnType<typeof dependency_1.ord.RecordEvent.prototype.toObject>;
            } = {};
            if (this.dataset_id != null) {
                data.dataset_id = this.dataset_id;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.created != null) {
                data.created = this.created.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.dataset_id.length)
                writer.writeString(1, this.dataset_id);
            if (this.description.length)
                writer.writeString(2, this.description);
            if (this.url.length)
                writer.writeString(3, this.url);
            if (this.has_created)
                writer.writeMessage(4, this.created, () => this.created.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DatasetExample {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DatasetExample();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.dataset_id = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        message.url = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.created, () => message.created = dependency_1.ord.RecordEvent.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DatasetExample {
            return DatasetExample.deserialize(bytes);
        }
    }
}
